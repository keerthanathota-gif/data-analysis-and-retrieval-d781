{
  "name": "cfr-agentic-server",
  "version": "1.0.0",
  "description": "Model Context Protocol server for CFR Agentic AI Application",
  "server": {
    "host": "0.0.0.0",
    "port": 8000,
    "base_path": "/mcp"
  },
  "tools": [
    {
      "name": "analyze_similarity",
      "description": "Analyze semantic similarity between CFR items at different levels (chapter, subchapter, section)",
      "input_schema": {
        "type": "object",
        "properties": {
          "level": {
            "type": "string",
            "enum": ["chapter", "subchapter", "section"],
            "description": "Level at which to perform similarity analysis"
          }
        },
        "required": ["level"]
      },
      "endpoint": "/api/analysis/similarity"
    },
    {
      "name": "cluster_items",
      "description": "Automatically cluster CFR items using HDBSCAN, K-Means, or DBSCAN algorithms",
      "input_schema": {
        "type": "object",
        "properties": {
          "level": {
            "type": "string",
            "enum": ["chapter", "subchapter", "section"],
            "description": "Level at which to perform clustering"
          },
          "algorithm": {
            "type": "string",
            "enum": ["hdbscan", "kmeans", "dbscan"],
            "description": "Clustering algorithm to use (default: hdbscan)"
          }
        },
        "required": ["level"]
      },
      "endpoint": "/api/clustering/cluster"
    },
    {
      "name": "query_database",
      "description": "Query the CFR database using semantic search to find relevant content",
      "input_schema": {
        "type": "object",
        "properties": {
          "query": {
            "type": "string",
            "description": "Natural language query to search for"
          },
          "level": {
            "type": "string",
            "enum": ["all", "chapter", "subchapter", "section"],
            "description": "Level to search at (default: all)"
          },
          "top_k": {
            "type": "integer",
            "minimum": 1,
            "maximum": 50,
            "description": "Number of top results to return (default: 10)"
          }
        },
        "required": ["query"]
      },
      "endpoint": "/api/rag/query"
    },
    {
      "name": "find_similar",
      "description": "Find items similar to a given chapter, subchapter, or section by name",
      "input_schema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name or partial name of the item to search for"
          },
          "search_type": {
            "type": "string",
            "enum": ["chapter", "subchapter", "section"],
            "description": "Type of item to search for"
          },
          "top_k": {
            "type": "integer",
            "minimum": 1,
            "maximum": 50,
            "description": "Number of similar items to return (default: 10)"
          }
        },
        "required": ["name", "search_type"]
      },
      "endpoint": "/api/rag/similar"
    },
    {
      "name": "get_analysis_summary",
      "description": "Get a comprehensive summary of all analyses for a given level",
      "input_schema": {
        "type": "object",
        "properties": {
          "level": {
            "type": "string",
            "enum": ["chapter", "subchapter", "section"],
            "description": "Level to get summary for"
          }
        },
        "required": ["level"]
      },
      "endpoint": "/api/analysis/summary"
    },
    {
      "name": "check_overlaps",
      "description": "Check for overlapping content at a specified level",
      "input_schema": {
        "type": "object",
        "properties": {
          "level": {
            "type": "string",
            "enum": ["chapter", "subchapter", "section"],
            "description": "Level to check for overlaps"
          }
        },
        "required": ["level"]
      },
      "endpoint": "/api/analysis/overlaps"
    },
    {
      "name": "check_redundancy",
      "description": "Check for redundant content at a specified level",
      "input_schema": {
        "type": "object",
        "properties": {
          "level": {
            "type": "string",
            "enum": ["chapter", "subchapter", "section"],
            "description": "Level to check for redundancy"
          }
        },
        "required": ["level"]
      },
      "endpoint": "/api/analysis/redundancy"
    }
  ],
  "metadata": {
    "author": "CFR Agentic AI Team",
    "documentation": "http://localhost:8000/docs",
    "repository": "https://github.com/your-repo/cfr-agentic-ai"
  }
}
